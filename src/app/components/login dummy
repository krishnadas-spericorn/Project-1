import React, { Component } from 'react';
import { Button} from 'reactstrap';
import {Popover, PopoverHeader, PopoverBody } from 'reactstrap';
import {Icon} from 'semantic-ui-react';
import './login.css';
class Login extends Component {
            constructor(props) {
    super(props);
    this.toggle = this.toggle.bind(this);

    this.state = {
      fname: '',
      lname: '',
      username: '',
      password: '',
      passwordConfirm: '',
      popoverOpen: false,
      show:0
    };
    
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }
  toggle() {
    this.setState({
      popoverOpen: !this.state.popoverOpen,
      show:1
    });
  }

  
  handleChange(e) {
    e.target.classList.add('active');
    
    this.setState({
      [e.target.name]: e.target.value
    });
    
    this.showInputError(e.target.name);
  }
  
  
  handleSubmit(e) {    
    e.preventDefault();
    
    console.log('component state', JSON.stringify(this.state));
    
    if (!this.showFormErrors()) {
      console.log('form is invalid: do not submit');
    } else {
      console.log('form is valid: submit');
    }
  }
  
  showFormErrors() {
    const inputs = document.querySelectorAll('input');
    let isFormValid = true;
    
    inputs.forEach(input => {
      input.classList.add('active');
      
      const isInputValid = this.showInputError(input.name);
      
      if (!isInputValid) {
        isFormValid = false;
      }
    });
    
    return isFormValid;
  }
  
  showInputError(refName) {
    const validity = this.refs[refName].validity;
    const label = document.getElementById(`${refName}Label`).textContent;
    const error = document.getElementById(`${refName}Error`);
    const isPassword = refName.indexOf('password') !== -1;
    const isPasswordConfirm = refName === 'passwordConfirm';
    const fname = refName === 'fname';
    const lname = refName === 'lname';
    
    if (isPasswordConfirm) {
      if (this.refs.password.value !== this.refs.passwordConfirm.value) {
        this.refs.passwordConfirm.setCustomValidity('Passwords do not match');
      } else {
        this.refs.passwordConfirm.setCustomValidity('');
      }
    }
    if (lname) {
      if (this.refs.fname.value !== this.refs.lname.value) {
        this.refs.lname.setCustomValidity('Passwords do not match');
      } else {
        this.refs.lname.setCustomValidity('');
      }
    }
    if (!validity.valid) {
      if (validity.valueMissing) {
        error.textContent = `${label} is a required field`; 
      } else if (validity.typeMismatch) {
        error.textContent = `${label} should be a valid email address`; 
      } else if (isPassword && validity.patternMismatch) {
        error.textContent = `${label} should minimum of  8 characters`; 
      } else if (isPasswordConfirm && validity.customError) {
        error.textContent = 'Passwords do not match';
      } else if (lname && validity.customError) {
          error.textContent = 'Passwords do not match';
      }
      return false;
    }
    
    error.textContent = '';
    return true;
  }

  render() {
    return ( 
      <form novalidate className="demoForm">
      <h2>Login</h2>
      <div className="panel panel-default">
      </div>
       <div className="form-group">
       
          <label id="fnameLabel">First Name</label>
          <input className="form-control"
              placeholder="First Name"
              type="text"
              name="fname"
              ref="fname"
              id="fname"             
              value={ this.state.fname } 
              onChange={ this.handleChange }
              required />
          <div className="error" id="fnameError" />
        </div>
        <div className="form-group">
       
         
          <label id="lnameLabel">Last Name</label>
          <input className="form-control"
             placeholder="Last Name"
            type="text"
            name="lname"
            ref="lname"
            value={ this.state.lname } 
            onChange={ this.handleChange }
            required />
          <div className="error" id="lnameError" />
          
        
        </div>
        <div className="form-group">
        
         
          <label id="usernameLabel">Email</label>
          <input className="form-control"
            placeholder="Email Name"
            type="email"
            name="username"
            ref="username"
            value={ this.state.username }        
            onChange={ this.handleChange }
            pattern="^([\w.%+-]+)@([\w-]+\.)+([\w]{2,})$"
            required />
          <div className="error" id="usernameError" />
        </div>

        <Popover placement="right" isOpen={this.state.popoverOpen} target="password" toggle={this.toggle}>
          <PopoverHeader>PASSWORD RULES</PopoverHeader>
        
          <PopoverBody>{this.state.show}<Icon circular name='remove' /> 8 characters minimum</PopoverBody>
          <PopoverBody><Icon circular name='remove' />  Contains at least 1 alphabet</PopoverBody>
          <PopoverBody><Icon circular name='remove' />  Contains at least 1 number</PopoverBody>
        </Popover>
        <div className="form-group">
        
         
          <label id="passwordLabel">Password</label>
          
             <input className="form-control"
              placeholder="Password"
              type="password" 
              name="password"
              ref="password"
              id="password"
              onClick={this.toggle}
              value={ this.state.password } 
              onChange={ this.handleChange }
              pattern="^(?=.*?[a-z]).{1,}$"
              required />
         
          <div className="error" id="passwordError" />
          
        
        </div>
        <div className="form-group">
        
         
          <label id="passwordConfirmLabel">Confirm Password</label>
          <input className="form-control"
            placeholder="Confirm Password"         
            type="password" 
            name="passwordConfirm"
            ref="passwordConfirm"
            value={ this.state.passwordConfirm } 
            onChange={ this.handleChange }
            required />
          <div className="error" id="passwordConfirmError" />
          
        
        </div>
        <Button color="danger"
          onClick={ this.handleSubmit }>submit</Button>
        
      </form>
    );
  }
}    
export default Login;